from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db import SessionLocal, User, Answer
from main import LOCALES
from sqlalchemy import select, func, desc, and_, update
from keyboards.menu import get_reply_menu_keyboard
from datetime import datetime, date, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import get_or_create_user
from urllib.parse import unquote
import os

router = Router()

LANGS = [
    ("ru", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"),
    ("en", "üá¨üáß English"),
]


def get_lang_keyboard():
    kb = InlineKeyboardBuilder()
    for code, label in LANGS:
        kb.button(text=label, callback_data=f"lang_{code}")
    return kb.as_markup()


@router.message(CommandStart())
async def cmd_start(message: Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    referrer_id = None
    if message.text and ' ' in message.text:
        param = message.text.split(' ', 1)[1]
        if param.startswith('ref_'):
            try:
                referrer_id = int(param.replace('ref_', ''))
            except Exception:
                referrer_id = None
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = result.scalar_one_or_none()
        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            user = User(tg_id=message.from_user.id, username=message.from_user.username, referrer_id=referrer_id)
            session.add(user)
            await session.commit()
            if referrer_id:
                ref_result = await session.execute(select(User).where(User.tg_id == referrer_id))
                ref_user = ref_result.scalar_one_or_none()
                if ref_user:
                    ref_user.referrals_count = (ref_user.referrals_count or 0) + 1
                    await session.commit()
    welcome_img = 'data/images/welcome.jpg'
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GuessShotBot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:"
    if os.path.exists(welcome_img):
        await message.answer_photo(InputFile(welcome_img), caption=text)
    else:
        await message.answer(text)
    await message.answer(text, reply_markup=get_lang_keyboard())


@router.callback_query(F.data.startswith("lang_"))
async def lang_chosen(callback: CallbackQuery, state: FSMContext, data: dict):
    lang = callback.data.split("_")[1]

    async with SessionLocal() as session:
        user = await get_or_create_user(session, callback.from_user.id)
        user.lang = lang
        await session.commit()

    locales = data["locales"]
    locale = locales.get(lang, locales.get("ru", {}))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
    reply_kb = get_reply_menu_keyboard(lang)
    await callback.message.answer(
        locale.get("menu", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"), reply_markup=reply_kb
    )
    await callback.answer()
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (ReplyKeyboard)
@router.message()
async def handle_menu_buttons(message: Message):
    user_id = message.from_user.id
    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        lang = user.lang if user else 'ru'
    locale = LOCALES.get(lang, LOCALES['ru'])
    text = message.text.strip()
    if text == locale.get('play_btn', 'üé¨ –ò–≥—Ä–∞—Ç—å'):
        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å"
        await message.answer(locale.get('play_soon', '–ò–≥—Ä–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç!'))
    elif text == locale.get('stats_btn', 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'):
        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        await menu_stats_message(message, user, lang)
    elif text == locale.get('rating_btn', 'üèÜ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥'):
        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É "–†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è"
        await menu_rating_message(message, user, lang)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
async def menu_stats_message(message: Message, user, lang):
    locale = LOCALES.get(lang, LOCALES['ru'])
    async with SessionLocal() as session:
        user.no_win_streak = get_no_win_streak(user, session)
        user.answer_streak = get_answer_streak(user, session)
    medals = user.medals if user and user.medals else ''
    new_achievements = []
    ach_texts = []
    for ach in ACHIEVEMENTS:
        if ach["emoji"] not in medals and ach["check"](user):
            medals += ach["emoji"] + ' '
            new_achievements.append(ach["emoji"])
        if ach["emoji"] in medals:
            key = 'ach_brain' if ach["emoji"] == 'üß†' else 'ach_explorer'
            ach_texts.append(locale.get(key, ach["name"]))
    if 'ü•á' in medals:
        ach_texts.append(locale.get('winner_medal', 'ü•á Winner of the Day'))
    if new_achievements:
        async with SessionLocal() as session:
            await session.execute(
                update(User).where(User.id == user.id).values(medals=medals)
            )
            await session.commit()
    stats = (
        f"{locale.get('your_score', '–í–∞—à —Å—á—ë—Ç')}: <b>{user.score if user else 0}</b>\n"
        f"{locale.get('your_streak', '–°–µ—Ä–∏—è –ø–æ–±–µ–¥')}: <b>{user.streak if user else 0}</b>\n"
        f"{locale.get('games_played', '–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ')}: <b>{user.games_played if user else 0}</b>\n"
        f"{locale.get('achievements', '–ê—á–∏–≤–∫–∏')}: {'; '.join(ach_texts) if ach_texts else '-'}"
    )
    await message.answer(stats, parse_mode='HTML')


async def menu_rating_message(message: Message, user, lang):
    locale = LOCALES.get(lang, LOCALES['ru'])
    today = date.today()
    async with SessionLocal() as session:
        scores_result = await session.execute(
            select(
                Answer.user_id,
                func.count().label('score')
            ).where(
                and_(
                    Answer.is_correct,
                    Answer.date >= datetime.combine(
                        today, datetime.min.time()
                    ),
                    Answer.date <= datetime.combine(
                        today, datetime.max.time()
                    ),
                )
            ).group_by(Answer.user_id).order_by(desc('score')).limit(5)
        )
        scores = scores_result.fetchall()
        if not scores:
            await message.answer(locale.get('no_rating_today', '–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!'))
            return
        user_ids = [row[0] for row in scores]
        users_result = await session.execute(select(User).where(User.id.in_(user_ids)))
        users_dict = {u.id: u for u in users_result.scalars()}
        top1_id = scores[0][0]
        top1_user = users_dict[top1_id]
        if 'ü•á' not in (top1_user.medals or ''):
            new_medals = (top1_user.medals or '') + 'ü•á '
            await session.execute(
                update(User).where(User.id == top1_id).values(medals=new_medals)
            )
            await session.commit()
        lines = []
        for idx, (uid, score) in enumerate(scores, 1):
            medal = 'ü•á ' if idx == 1 else ''
            uname = users_dict[uid].username or f"id{users_dict[uid].tg_id}"
            lines.append(
                f"{medal}{idx}. {uname}: <b>{score}</b>"
            )
        text = (
            f"{locale.get('rating_today', '–†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è')}\n\n" + "\n".join(lines)
        )
        await message.answer(text, parse_mode='HTML')


ACHIEVEMENTS = [
    {"emoji": "üß†", "check": lambda user: user.streak >= 5, "name": "–ö–∏–Ω–æ–º–∞–Ω"},
    {"emoji": "üåç", "check": lambda user: user.games_played >= 10, "name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"},
    {"emoji": "üèÖ", "check": lambda user: user.streak >= 10, "name": "–ú–∞—Å—Ç–µ—Ä –∏–Ω—Ç—É–∏—Ü–∏–∏"},
    {"emoji": "üî•", "check": lambda user: (user.score or 0) > 0 and (user.games_played or 0) > 0 and (user.score == 1), "name": "–ù–æ–≤–∏—á–æ–∫ –≤ –¥–µ–ª–µ"},
    {"emoji": "üê¢", "check": lambda user: hasattr(user, 'no_win_streak') and user.no_win_streak >= 3, "name": "–¢–µ—Ä–ø–µ–ª–∏–≤—ã–π"},
    {"emoji": "üìÜ", "check": lambda user: hasattr(user, 'answer_streak') and user.answer_streak >= 7, "name": "–í–µ—Ä–Ω—ã–π –∏–≥—Ä–æ–∫"},
    {"emoji": "üì£", "check": lambda user: (user.referrals_count or 0) >= 5, "name": "–ê–º–±–∞—Å—Å–∞–¥–æ—Ä"},
    {"emoji": "üí™", "check": lambda user: hasattr(user, 'answer_streak') and user.answer_streak >= 7, "name": "–ñ–µ–ª–µ–∑–Ω–∞—è –≤–æ–ª—è"},
]


@router.callback_query(F.data == "menu_stats")
async def menu_stats(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        lang = user.lang if user else 'ru'
    locale = LOCALES.get(lang, LOCALES['ru'])
    async with SessionLocal() as session:
        user.no_win_streak = get_no_win_streak(user, session)
        user.answer_streak = get_answer_streak(user, session)
    medals = user.medals if user and user.medals else ''
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏
    new_achievements = []
    ach_texts = []
    for ach in ACHIEVEMENTS:
        if ach["emoji"] not in medals and ach["check"](user):
            medals += ach["emoji"] + ' '
            new_achievements.append(ach["emoji"])
        if ach["emoji"] in medals:
            key = 'ach_brain' if ach["emoji"] == 'üß†' else 'ach_explorer'
            ach_texts.append(locale.get(key, ach["name"]))
    # –ú–µ–¥–∞–ª—å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–Ω—è
    if 'ü•á' in medals:
        ach_texts.append(locale.get('winner_medal', 'ü•á Winner of the Day'))
    if new_achievements:
        async with SessionLocal() as session:
            await session.execute(
                update(User).where(User.id == user.id).values(medals=medals)
            )
            await session.commit()
    stats = (
        f"{locale.get('your_score', '–í–∞—à —Å—á—ë—Ç')}: <b>{user.score if user else 0}</b>\n"
        f"{locale.get('your_streak', '–°–µ—Ä–∏—è –ø–æ–±–µ–¥')}: <b>{user.streak if user else 0}</b>\n"
        f"{locale.get('games_played', '–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ')}: <b>{user.games_played if user else 0}</b>\n"
        f"{locale.get('achievements', '–ê—á–∏–≤–∫–∏')}: {'; '.join(ach_texts) if ach_texts else '-'}"
    )
    await callback.message.answer(stats)
    await callback.answer()


@router.callback_query(F.data == "menu_rating")
async def menu_rating(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        lang = user.lang if user else 'ru'
        locale = LOCALES.get(lang, LOCALES['ru'])
        today = date.today()
        # –°—á–∏—Ç–∞–µ–º –æ—á–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        scores_result = await session.execute(
            select(
                Answer.user_id,
                func.count().label('score')
            ).where(
                and_(
                    Answer.is_correct,
                    Answer.date >= datetime.combine(
                        today, datetime.min.time()
                    ),
                    Answer.date <= datetime.combine(
                        today, datetime.max.time()
                    ),
                )
            ).group_by(Answer.user_id).order_by(desc('score')).limit(10)
        )
        scores = scores_result.fetchall()
        if not scores:
            await callback.message.answer(locale.get('no_rating_today', '–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!'))
            await callback.answer()
            return
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = [row[0] for row in scores]
        users_result = await session.execute(select(User).where(User.id.in_(user_ids)))
        users_dict = {u.id: u for u in users_result.scalars()}
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ–¥–∞–ª—å–∫—É —Ç–æ–ø-1
        top1_id = scores[0][0]
        top1_user = users_dict[top1_id]
        if 'ü•á' not in (top1_user.medals or ''):
            new_medals = (top1_user.medals or '') + 'ü•á '
            await session.execute(
                update(User).where(User.id == top1_id).values(medals=new_medals)
            )
            await session.commit()
        lines = []
        for idx, (uid, score) in enumerate(scores, 1):
            medal = 'ü•á ' if idx == 1 else ''
            uname = users_dict[uid].username or f"id{users_dict[uid].tg_id}"
            lines.append(f"{medal}{idx}. {uname}: <b>{score}</b>")
        text = f"{locale.get('rating_today', '–†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è')}\n\n" + "\n".join(lines)
        await callback.message.answer(text)
    await callback.answer()


@router.message(Command("stats"))
async def stats_command(message: Message):
    user_id = message.from_user.id
    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        lang = user.lang if user else 'ru'
    await menu_stats_message(message, user, lang)


@router.message(Command("rating"))
async def rating_command(message: Message):
    user_id = message.from_user.id
    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        lang = user.lang if user else 'ru'
    await menu_rating_message(message, user, lang)


@router.message(Command("profile"))
async def profile_command(message: Message):
    user_id = message.from_user.id
    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        lang = user.lang if user else 'ru'
    await send_profile(message, user, lang)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
@router.message()
async def handle_profile_button(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    locale = LOCALES.get('ru', LOCALES['ru'])
    if text == locale.get('profile_btn', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'):
        async with SessionLocal() as session:
            result = await session.execute(
                select(User).where(User.tg_id == user_id)
            )
            user = result.scalar_one_or_none()
            lang = user.lang if user else 'ru'
        await send_profile(message, user, lang)

async def send_profile(message: Message, user, lang):
    locale = LOCALES.get(lang, LOCALES['ru'])
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    async with SessionLocal() as session:
        user.no_win_streak = get_no_win_streak(user, session)
        user.answer_streak = get_answer_streak(user, session)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    username = user.username or f"id{user.tg_id}"
    first_seen = user.created_at.strftime('%d.%m.%Y') if hasattr(user, 'created_at') and user.created_at else '-'
    total_games = user.games_played or 0
    wins = user.score or 0
    losses = total_games - wins if total_games > wins else 0
    streak = user.streak or 0
    lang_display = '–†—É—Å—Å–∫–∏–π' if lang == 'ru' else 'English'
    # –ê—á–∏–≤–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    medals = user.medals if user and user.medals else ''
    ach_texts = []
    for ach in ACHIEVEMENTS:
        if ach["emoji"] in medals or ach["check"](user):
            key = 'ach_brain' if ach["emoji"] == 'üß†' else 'ach_explorer'
            if ach["emoji"] == 'üèÖ':
                key = 'ach_master'
            elif ach["emoji"] == 'üê¢':
                key = 'ach_turtle'
            elif ach["emoji"] == 'üî•':
                key = 'ach_newbie'
            elif ach["emoji"] == 'üìÜ':
                key = 'ach_loyal'
            ach_texts.append(f"{ach['emoji']} {locale.get(key, ach['name'])}")
    if 'ü•á' in medals:
        ach_texts.append(locale.get('winner_medal', 'ü•á Winner of the Day'))
    ach_str = '\n'.join(ach_texts) if ach_texts else '-'
    profile = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: <b>{username}</b>\n"
        f"–Ø–∑—ã–∫: <b>{lang_display}</b>\n"
        f"–ü–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥: <b>{first_seen}</b>\n"
        f"–í—Å–µ–≥–æ –∏–≥—Ä: <b>{total_games}</b>\n"
        f"–ü–æ–±–µ–¥—ã: <b>{wins}</b> / –ü–æ—Ä–∞–∂–µ–Ω–∏—è: <b>{losses}</b>\n"
        f"–°–µ—Ä–∏—è –ø–æ–±–µ–¥: <b>{streak}</b>\n"
        f"–ê—á–∏–≤–∫–∏:\n{ach_str}\n"
        f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: <b>{user.referrals_count or 0}</b>\n"
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/guessshot_test_bot?start=ref_{user.tg_id}\n"
    )
    await message.answer(profile, parse_mode='HTML')


@router.message(Command("help"))
async def help_command(message: Message):
    text = (
        "GuessShotBot ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å —Ñ–æ—Ç–æ-–≤–æ–ø—Ä–æ—Å–∞–º–∏!\n\n"
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å 2 –≤–æ–ø—Ä–æ—Å–∞: –∫–∞–¥—Ä –∏–∑ —Ñ–∏–ª—å–º–∞ –∏ –≥–æ—Ä–æ–¥.\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ, –Ω–∞–±–∏—Ä–∞–π—Ç–µ –æ—á–∫–∏, –ø–æ–ø–∞–¥–∞–π—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥ –¥–Ω—è!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —Å—Ç–∞—Ä—Ç –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞\n"
        "/stats ‚Äî –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞—á–∏–≤–∫–∏\n"
        "/rating ‚Äî —Ç–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤ –¥–Ω—è\n"
        "/help ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."
    )
    await message.answer(text)


@router.message(Command("history"))
async def history_command(message: Message):
    user_id = message.from_user.id
    async with SessionLocal() as session:
        result = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        answers_result = await session.execute(
            select(Answer).where(Answer.user_id == user.id).order_by(Answer.date.desc()).limit(5)
        )
        answers = answers_result.scalars().all()
    if not answers:
        await message.answer("–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.")
        return
    lines = []
    for ans in answers:
        date_str = ans.date.strftime('%d.%m.%Y %H:%M')
        status = '‚úÖ' if ans.is_correct else '‚ùå'
        lines.append(f"{date_str} | {ans.topic} | {status} | {getattr(ans, 'chosen', '-')}")
    text = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–≤–µ—Ç–æ–≤:</b>\n" + "\n".join(lines)
    await message.answer(text, parse_mode='HTML')

# –î–ª—è –Ω–æ–≤—ã—Ö –∞—á–∏–≤–æ–∫ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—á–∏—Å–ª—è—Ç—å no_win_streak –∏ answer_streak –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

def get_no_win_streak(user, session):
    # –°—á–∏—Ç–∞–µ—Ç –¥–Ω–∏ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø–æ–±–µ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏)
    from sqlalchemy import func
    today = date.today()
    streak = 0
    for i in range(3):
        day = today - timedelta(days=i)
        res = session.execute(
            select(Answer).where(
                Answer.user_id == user.id,
                func.date(Answer.date) == day,
            )
        )
        answers = res.scalars().all()
        if not answers:
            break
        if any(a.is_correct for a in answers):
            break
        streak += 1
    return streak

def get_answer_streak(user, session):
    # –°—á–∏—Ç–∞–µ—Ç –¥–Ω–∏ –ø–æ–¥—Ä—è–¥ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏)
    from sqlalchemy import func
    today = date.today()
    streak = 0
    for i in range(7):
        day = today - timedelta(days=i)
        res = session.execute(
            select(Answer).where(
                Answer.user_id == user.id,
                func.date(Answer.date) == day,
            )
        )
        answers = res.scalars().all()
        if answers:
            streak += 1
        else:
            break
    return streak

ADMIN_CHAT_ID = 5900895276

class AdminStates(StatesGroup):
    menu = State()
    upload_question = State()
    input_topic = State()
    input_question = State()
    input_options = State()
    input_answer = State()
    input_fact = State()
    input_photo = State()
    confirm = State()
    stats = State()
    clear = State()

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å")],
        [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_kb, parse_mode='HTML')
    await state.set_state(AdminStates.menu)

@router.message(AdminStates.menu)
async def admin_menu_handler(message: Message, state: FSMContext):
    text = message.text.strip()
    if text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É (movies, cities, music, sport):")
        await state.set_state(AdminStates.input_topic)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (movies, cities, music, sport):")
        await state.set_state(AdminStates.stats)
    elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å":
        await message.answer("–û—á–∏—Å—Ç–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        # await state.set_state(AdminStates.clear)
    elif text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=get_reply_menu_keyboard('ru'))
        await state.clear()
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

@router.message(AdminStates.stats)
async def admin_stats_topic(message: Message, state: FSMContext):
    topic = message.text.strip()
    lang = 'ru'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    file_path = f"data/{topic}_{lang}.json"
    import os, json
    if not os.path.exists(file_path):
        await message.answer(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.set_state(AdminStates.menu)
        return
    with open(file_path, encoding='utf-8') as f:
        questions = json.load(f)
    if not questions:
        await message.answer("–í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.")
        await state.set_state(AdminStates.menu)
        return
    lines = [f"{q['id']}. {q['question']}" for q in questions]
    text = f"<b>–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ {topic}:</b>\n" + '\n'.join(lines)
    await message.answer(text, parse_mode='HTML')
    await state.set_state(AdminStates.menu)

@router.message(AdminStates.input_topic)
async def admin_input_topic(message: Message, state: FSMContext):
    topic = message.text.strip()
    await state.update_data(topic=topic)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(AdminStates.input_question)

@router.message(AdminStates.input_question)
async def admin_input_question(message: Message, state: FSMContext):
    await state.update_data(question=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    await state.set_state(AdminStates.input_options)

@router.message(AdminStates.input_options)
async def admin_input_options(message: Message, state: FSMContext):
    options = [opt.strip() for opt in message.text.split(',') if opt.strip()]
    await state.update_data(options=options)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
    await state.set_state(AdminStates.input_answer)

@router.message(AdminStates.input_answer)
async def admin_input_answer(message: Message, state: FSMContext):
    await state.update_data(answer=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")
    await state.set_state(AdminStates.input_fact)

@router.message(AdminStates.input_fact)
async def admin_input_fact(message: Message, state: FSMContext):
    fact = message.text.strip()
    if fact == '-':
        fact = ''
    await state.update_data(fact=fact)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(AdminStates.input_photo)

@router.message(AdminStates.input_photo)
async def admin_input_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
    img_name = f"admin_{photo.file_id}.jpg"
    img_path = f"data/images/{img_name}"
    await message.bot.download(file, destination=img_path)
    await state.update_data(image=img_name)
    data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Ñ–∞–π–ª
    topic = data['topic']
    lang = 'ru'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    file_path = f"data/{topic}_{lang}.json"
    import json, os
    if os.path.exists(file_path):
        with open(file_path, encoding='utf-8') as f:
            questions = json.load(f)
    else:
        questions = []
    new_id = max([q['id'] for q in questions], default=0) + 1
    question = {
        'id': new_id,
        'question': data['question'],
        'options': data['options'],
        'answer': data['answer'],
        'image': img_name,
        'fact': data['fact']
    }
    questions.append(question)
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(questions, f, ensure_ascii=False, indent=2)
    await message.answer(f"–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {file_path}!", reply_markup=admin_kb)
    await state.set_state(AdminStates.menu)


class FeedbackStates(StatesGroup):
    waiting_feedback = State()

@router.message()
async def handle_feedback_button(message: Message, state: FSMContext):
    text = message.text.strip()
    locale = LOCALES.get('ru', LOCALES['ru'])
    if text == locale.get('feedback_btn', 'üí¨ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'):
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –∏–¥–µ—é ‚Äî –º—ã —É—á—Ç—ë–º! –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.set_state(FeedbackStates.waiting_feedback)

@router.message(FeedbackStates.waiting_feedback)
async def process_feedback(message: Message, state: FSMContext):
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await message.copy_to(ADMIN_CHAT_ID)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.clear()

@router.message(Command("achievements"))
async def achievements_command(message: Message):
    await show_achievements_leaders(message)

@router.message()
async def handle_achievements_button(message: Message):
    text = message.text.strip()
    locale = LOCALES.get('ru', LOCALES['ru'])
    if text == locale.get('achievements_btn', 'üèÖ –ê—á–∏–≤–∫–∏-–ª–∏–¥–µ—Ä—ã'):
        await show_achievements_leaders(message)

async def show_achievements_leaders(message: Message):
    async with SessionLocal() as session:
        users_result = await session.execute(select(User))
        users = users_result.scalars().all()
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—á–∏–≤–æ–∫ —É –∫–∞–∂–¥–æ–≥–æ
        leaderboard = []
        for user in users:
            medals = (user.medals or '').strip().split()
            if not medals:
                continue
            # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—á–∏–≤–∫–∏ –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –ø–æ–±–µ–¥—ã
            last_ach_date = user.created_at or datetime.min
            answers_result = await session.execute(
                select(Answer).where(Answer.user_id == user.id).order_by(Answer.date.desc())
            )
            answers = answers_result.scalars().all()
            if answers:
                last_ach_date = answers[0].date
            leaderboard.append({
                'user': user,
                'medals': medals,
                'count': len(medals),
                'last_ach_date': last_ach_date
            })
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞—á–∏–≤–æ–∫, –∑–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—á–∏–≤–∫–∏ (—É–±—ã–≤.)
        leaderboard.sort(key=lambda x: (-x['count'], -x['last_ach_date'].timestamp()))
        top = leaderboard[:10]
        if not top:
            await message.answer('–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∞—á–∏–≤–∫–∞–º.')
            return
        lines = []
        for idx, entry in enumerate(top, 1):
            user = entry['user']
            medals = ' '.join(entry['medals'])
            uname = user.username or f"id{user.tg_id}"
            lines.append(f"{idx}. <b>{uname}</b> ‚Äî {medals} ({entry['count']})")
        text = '<b>üèÖ –¢–æ–ø-10 –ø–æ –∞—á–∏–≤–∫–∞–º:</b>\n' + '\n'.join(lines)
        await message.answer(text, parse_mode='HTML')

@router.message(Command("weekly"))
async def weekly_rating(message: Message):
    await show_season_rating(message, period='week')

@router.message(Command("monthly"))
async def monthly_rating(message: Message):
    await show_season_rating(message, period='month')

async def show_season_rating(message: Message, period='week'):
    user_id = message.from_user.id
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar_one_or_none()
        lang = user.lang if user else 'ru'
        locale = LOCALES.get(lang, LOCALES['ru'])
        today = date.today()
        if period == 'week':
            start = today - timedelta(days=today.weekday())
            end = start + timedelta(days=6)
            title = locale.get('weekly_rating', 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –Ω–µ–¥–µ–ª–∏')
        else:
            start = today.replace(day=1)
            end = (today.replace(day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1)
            title = locale.get('monthly_rating', 'üèÜ –†–µ–π—Ç–∏–Ω–≥ –º–µ—Å—è—Ü–∞')
        scores_result = await session.execute(
            select(
                Answer.user_id,
                func.count().label('score')
            ).where(
                and_(
                    Answer.is_correct,
                    Answer.date >= datetime.combine(start, datetime.min.time()),
                    Answer.date <= datetime.combine(end, datetime.max.time()),
                )
            ).group_by(Answer.user_id).order_by(desc('score')).limit(10)
        )
        scores = scores_result.fetchall()
        if not scores:
            await message.answer(locale.get('no_rating_today', '–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!'))
            return
        user_ids = [row[0] for row in scores]
        users_result = await session.execute(select(User).where(User.id.in_(user_ids)))
        users_dict = {u.id: u for u in users_result.scalars()}
        # –ê—á–∏–≤–∫–∏ –∑–∞ —Ç–æ–ø-3
        for idx, (uid, score) in enumerate(scores[:3], 1):
            top_user = users_dict[uid]
            medal = {1: 'ü•á', 2: 'ü•à', 3: 'ü•â'}.get(idx)
            if medal and (not top_user.medals or medal not in top_user.medals):
                new_medals = (top_user.medals or '') + f'{medal} '
                await session.execute(update(User).where(User.id == top_user.id).values(medals=new_medals))
                await session.commit()
        lines = []
        for idx, (uid, score) in enumerate(scores, 1):
            medal = {1: 'ü•á', 2: 'ü•à', 3: 'ü•â'}.get(idx, '')
            uname = users_dict[uid].username or f"id{users_dict[uid].tg_id}"
            lines.append(f"{medal}{idx}. {uname}: <b>{score}</b>")
        text = f"{title}\n\n" + "\n".join(lines)
        await message.answer(text, parse_mode='HTML')
